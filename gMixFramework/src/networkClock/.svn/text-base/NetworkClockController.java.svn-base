package networkClock;

import framework.Controller;
import framework.LocalClassLoader;
import framework.Mix;
import architectureInterface.NetworkClock;


/**
 * Controller class of component <code>NetworkClock</code>. 
 * <p>
 * Provides a clock, which can be synchronized with a SNTP server (See RFC 
 * 2030 for further information).
 * <p>
 * Can retrieve SNTP messages from a SNTP server at regular intervals and 
 * calculate the local clock's offset each time. The local clock's offset 
 * calculation is implemented according to the SNTP algorithm specified in RFC 
 * 2030.  
 * <p>
 * The method <code>getTime()</code> can be used to generate timestamps (The 
 * typical accuracy of a SNTP client/server exchange is fractions of a second).
 * <p>
 * The System's time is never changed.
 * <p>
 * Uses Adam Buckley's class <code>NtpMessage</code> as message format.
 * 
 * 
 * @author Karl-Peter Fuchs
 * 
 * @see NtpMessage
 */
public class NetworkClockController extends Controller implements NetworkClockInterface {

	
	public NetworkClockController(Mix mix) {
		super(mix);
	}


	private NetworkClockInterface networkClockImplementation;
	
	
	@Override
	public long getTime() {
		return networkClockImplementation.getTime();
	}

	
	@Override
	public void instantiateSubclass() {
		this.networkClockImplementation = LocalClassLoader.instantiateNetworkClockImplementation(this);
	}
	
}
